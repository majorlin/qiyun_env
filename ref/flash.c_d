#include "common.h"
__ram_func void flash_test(){
    //flash register
    RC32(ADDR32(0x40020000),0x00000080);
    RC32(ADDR32(0x40020004),0x00000000);
    RC32(ADDR32(0x40020008),0x00000101);
    RC32(ADDR32(0x4002000C),0x00000001);
    RC32(ADDR32(0x40020010),0x00000000);
    RC32(ADDR32(0x40020014),0x00000000);
    RC32(ADDR32(0x40020018),0x00000000);
    RC32(ADDR32(0x4002001C),0x00000000);
    RC32(ADDR32(0x40020020),0x00000000);
    RC32(ADDR32(0x40020024),0x00000000);
    RC32(ADDR32(0x40020028),0x00000000);
    RC32(ADDR32(0x4002002C),0x00000000);

    WCE32(ADDR32(0x40020008),0x00000001,0x00000001); //bit8: lsactive
    WCE32(ADDR32(0x40020018),0x00004000,0x00004000); //addr
    WCE32(ADDR32(0x40020020),0x12345678,0x12345678); //data
    WCE32(ADDR32(0x40020024),0x87654321,0x87654321);
    WCE32(ADDR32(0x40020028),0x55AA33CC,0x55AA33CC);
    WCE32(ADDR32(0x4002002C),0xFF00FF00,0xFF00FF00);

    //program 16 bytes
    printf("PGM\r\n");
    WCE32(ADDR32(0x40020010),0x00000024,0x00000024); //cmd
    WO32(ADDR32(0x40020000),0x00000080);

    while(!(ADDR32(0x40020000)&0x80));
    RC32(ADDR32(0x40020000),0x00000280);
    RC32(ADDR32(0x00004000),0x12345678);
    RC32(ADDR32(0x00004004),0x87654321);
    RC32(ADDR32(0x00004008),0x55AA33CC);
    RC32(ADDR32(0x0000400C),0xFF00FF00);

    printf("S0x%08lx!", FMU0->FSTAT);
    //sector erase
    printf("ERM\r\n");
    WCE32(ADDR32(0x40020010),0x00000042,0x00000042); //cmd
    WO32(ADDR32(0x40020000),0x00000080);

    //hard fault generation
    //RC32(ADDR32(0x00000100),0x20003FF0);

    while(!(ADDR32(0x40020000)&0x80));
    RC32(ADDR32(0x40020000),0x00000280);
    RC32(ADDR32(0x00004000),0xFFFFFFFF);
    RC32(ADDR32(0x00004004),0xFFFFFFFF);
    RC32(ADDR32(0x00004008),0xFFFFFFFF);
    RC32(ADDR32(0x0000400C),0xFFFFFFFF);
    //page erase(deleted)
    WCE32(ADDR32(0x40020010),0x00000023,0x00000023); //cmd
    WO32(ADDR32(0x40020000),0x00000080);
    while(!(ADDR32(0x40020000)&0x80));
    RC32(ADDR32(0x40020000),0x000002A0);
    WO32(ADDR32(0x40020000),0x00000020);
    RC32(ADDR32(0x40020000),0x00000280);

    printf("S0x%08lx!", FMU0->FSTAT);
    printf("EIFR\r\n");
    WCE32(ADDR32(0x40020018),0x02000000,0x02000000); //addr ifr
    //sector erase
    WCE32(ADDR32(0x40020010),0x00000042,0x00000042); //cmd
    WO32(ADDR32(0x40020000),0x00000080);
    while(!(ADDR32(0x40020000)&0x80));
    RC32(ADDR32(0x40020000),0x00000280);
    RC32(ADDR32(0x02000000),0xFFFFFFFF);
    RC32(ADDR32(0x02000004),0xFFFFFFFF);
    RC32(ADDR32(0x02000008),0xFFFFFFFF);
    RC32(ADDR32(0x0200000C),0xFFFFFFFF);

    //program ifr(0x0200_0000)
    printf("S0x%08lx!", FMU0->FSTAT);
    printf("PIFR\r\n");
    WCE32(ADDR32(0x40020010),0x00000024,0x00000024); //cmd
    WO32(ADDR32(0x40020000),0x00000080);
    while(!(ADDR32(0x40020000)&0x80));
    RC32(ADDR32(0x40020000),0x00000280);
    RC32(ADDR32(0x02000000),0x12345678);
    RC32(ADDR32(0x02000004),0x87654321);
    RC32(ADDR32(0x02000008),0x55AA33CC);
    RC32(ADDR32(0x0200000C),0xFF00FF00);
    //ifr sector erase
    printf("S0x%08lx!", FMU0->FSTAT);
    printf("EIFR\r\n");
    WCE32(ADDR32(0x40020010),0x00000042,0x00000042); //cmd
    WO32(ADDR32(0x40020000),0x00000080);
    while(!(ADDR32(0x40020000)&0x80));
    RC32(ADDR32(0x40020000),0x00000280);
    RC32(ADDR32(0x02000000),0xFFFFFFFF);
    RC32(ADDR32(0x02000004),0xFFFFFFFF);
    RC32(ADDR32(0x02000008),0xFFFFFFFF);
    RC32(ADDR32(0x0200000C),0xFFFFFFFF);  
}
